import IncidentReport from "../models/IncidentReports.js";

// üü¢ CREATE ‚Äî th√™m b√°o c√°o s·ª± c·ªë
export const createIncidentReport = async (req, res) => {
  try {
    const { driver_id, bus_id, schedule_id, title, description, location } = req.body;

    if (!location || !location.coordinates) {
      return res.status(400).json({ message: "Thi·∫øu t·ªça ƒë·ªô v·ªã tr√≠ (location.coordinates)" });
    }

    const newReport = new IncidentReport({
      driver_id,
      bus_id,
      schedule_id,
      title,
      description,
      location,
    });

    await newReport.save();
    res.status(201).json({ message: "T·∫°o b√°o c√°o th√†nh c√¥ng ‚úÖ", report: newReport });
  } catch (error) {
    console.error("‚ùå L·ªói khi t·∫°o IncidentReport:", error);
    res.status(500).json({ message: "L·ªói server", error: error.message });
  }
};

// üü° READ ALL ‚Äî l·∫•y to√†n b·ªô b√°o c√°o
export const getAllIncidentReports = async (req, res) => {
  try {
    const reports = await IncidentReport.find()
      .populate({ path: "driver_id", select: "name phone role" })
      .populate({ path: "bus_id", select: "license_plate status" })
      .populate({ path: "schedule_id", select: "schedule_id date start_time end_time" })
      .sort({ createdAt: -1 });

    res.status(200).json(reports);
  } catch (error) {
    console.error("‚ùå L·ªói khi l·∫•y danh s√°ch IncidentReport:", error);
    res.status(500).json({ message: "L·ªói server", error: error.message });
  }
};

// üü† READ BY ID ‚Äî l·∫•y b√°o c√°o theo ID
export const getIncidentReportById = async (req, res) => {
  try {
    const report = await IncidentReport.findById(req.params.id)
      .populate("driver_id")
      .populate("bus_id")
      .populate("schedule_id");

    if (!report) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y b√°o c√°o" });

    res.status(200).json(report);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

// üîµ UPDATE ‚Äî c·∫≠p nh·∫≠t tr·∫°ng th√°i ho·∫∑c th√¥ng tin b√°o c√°o
export const updateIncidentReport = async (req, res) => {
  try {
    const updated = await IncidentReport.findByIdAndUpdate(
      req.params.id,
      req.body,
      { new: true }
    );

    if (!updated) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y b√°o c√°o" });

    res.status(200).json({ message: "C·∫≠p nh·∫≠t th√†nh c√¥ng ‚úÖ", report: updated });
  } catch (error) {
    res.status(400).json({ message: error.message });
  }
};

// üî¥ DELETE ‚Äî x√≥a b√°o c√°o
export const deleteIncidentReport = async (req, res) => {
  try {
    const deleted = await IncidentReport.findByIdAndDelete(req.params.id);
    if (!deleted) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y b√°o c√°o" });
    res.status(200).json({ message: "X√≥a b√°o c√°o th√†nh c√¥ng ‚úÖ" });
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

// üß≠ T√åM THEO B√ÅN K√çNH ‚Äî l·ªçc s·ª± c·ªë trong khu v·ª±c
export const getReportsNearby = async (req, res) => {
  try {
    const { lng, lat, radius } = req.query;

    if (!lng || !lat || !radius) {
      return res.status(400).json({ message: "Thi·∫øu tham s·ªë lng, lat ho·∫∑c radius" });
    }

    const reports = await IncidentReport.find({
      location: {
        $near: {
          $geometry: { type: "Point", coordinates: [parseFloat(lng), parseFloat(lat)] },
          $maxDistance: parseFloat(radius),
        },
      },
    }).populate("bus_id driver_id schedule_id");

    res.status(200).json(reports);
  } catch (error) {
    console.error("‚ùå L·ªói khi t√¨m b√°o c√°o g·∫ßn:", error);
    res.status(500).json({ message: "L·ªói server", error: error.message });
  }
};
